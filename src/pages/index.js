import Head from "next/head";
import Image from "next/image";
import { Inter, Lato, Roboto } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Link from "next/link";
import Google from "../images/Google.png";
import { auth, firebase, googleAuthProvider } from "../lib/firebase";
import { toast } from "react-hot-toast";
import { StyleRegistry } from "styled-jsx";
import { useState, useRef } from "react";

const inter = Inter({ subsets: ["latin"] });
const lato = Lato({
  subsets: ["latin"],
  style: ["italic", "normal"],
  weight: ["400", "100"],
});

export default function Home() {
  // This is the Main Page of the website

  // State for Right Panel (Signup/Login)
  const [userLogin, setUserLogin] = useState(true);

  // This is the sign in with google function
  const signInWithGoogle = async () => {
    await auth.signInWithPopup(googleAuthProvider).then(() => {
      toast.success("Signed in");
    });
  };
  // Sign Up with an email & add username
  const signUpWithEmail = async () => {
    var email = signUpEmailRef.current.value;
    var username = signUpUsernameRef.current.value;
    var password = signUpPasswordRef.current.value;
    var confirmPassword = signUpPasswordConfirmRef.current.value;
    await auth
      .createUserWithEmailAndPassword(email, password)
      .then((userCredentials) => {
        var user = userCredentials.user;
        if (user) {
          toast.success("Account Created");
          user.updateProfile({
            displayName: username,
          });
        }
      })
      .catch((error) => {
        var errorCode = error.code;
        var errorMessage = error.message;
        toast.error(errorCode + ":" + errorMessage);
      });
  };

  // Login With Email
  const loginWithEmail = async () => {
    var username = loginEmail.current.value;
    var password = loginPasswordRef.current.value;
    await auth
      .signInWithEmailAndPassword(username, password)
      .then((userCredentials) => {
        var user = userCredentials.user;
        toast.success(user.displayName + " Signed in");
      })
      .catch((error) => {
        var errorCode = error.code;
        var errorMessage = error.message;
        toast.error(errorCode + ":" + errorMessage);
      });
  };

  const resetPassword = () => {
    const email = loginEmail.current.value;

    if (!email || email == "") {
      toast.error("Please enter your email");
    }

    auth.sendPasswordResetEmail(email).then(() => {
      toast.success(
        "Password reset email has been sent,\n check your spam folder"
      );
    });
  };

  // Reference objs
  const loginEmail = useRef();
  const loginPasswordRef = useRef();

  const signUpUsernameRef = useRef();
  const signUpEmailRef = useRef();
  const signUpPasswordRef = useRef();
  const signUpPasswordConfirmRef = useRef();

  return (
    <>
      <Head>
        <title>üêàüêü</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {/* Left Side Panel */}
        <div className={styles.leftPanel}>
          <Hero />
        </div>

        {/* Could we make this it's own components? */}
        {/* Right Side Panel */}
        <div className={styles.rightPanel}>
          {userLogin ? (
            <>
              <div className={`${styles.loginTab} ${styles.authTab}`}>
                Login
              </div>
              <div
                className={`${styles.signUpTab} ${styles.authTab} ${styles.hiddenTab}`}
                onClick={() => setUserLogin(false)}
              >
                Signup
              </div>

              <h3 style={{ marginTop: 50 }}>Email</h3>
              <input type="text" ref={loginEmail} className="loginUsername" />
              <h3>Password</h3>
              <input
                type="password"
                ref={loginPasswordRef}
                className="loginPassword"
              />
              <p
                className="text-right underline hover:no-underline"
                onClick={() => resetPassword()}
              >
                Need to reset your password?
              </p>
              <div className={styles.loginSubmit}>
                <button onClick={() => loginWithEmail()}>
                  <p className="font-lato italic font-bold">Login</p>
                </button>
              </div>
              <div className={styles.loginDivider}></div>
            </>
          ) : (
            <>
              <div
                className={`${styles.loginTab} ${styles.authTab} ${styles.hiddenTab}`}
                onClick={() => setUserLogin(true)}
              >
                Login
              </div>
              <div className={`${styles.signUpTab} ${styles.authTab}`}>
                Signup
              </div>

              <h3 style={{ marginTop: 30 }}>Email</h3>
              <input type="email" ref={signUpEmailRef} />
              <h3>Username</h3>
              <input type="text" ref={signUpUsernameRef} />
              <h3>Password</h3>
              <input type="password" ref={signUpPasswordRef} />
              <h3>Confirm Password</h3>
              <input
                type="password"
                style={{ marginBottom: 10 }}
                ref={signUpPasswordConfirmRef}
              />
              <div className={styles.loginSubmit}>
                <button onClick={() => signUpWithEmail()}>
                  <p className="font-lato italic font-bold ">Sign up</p>
                </button>
              </div>
              <div className={styles.loginDivider}></div>
            </>
          )}
          <p className={styles.copyright}>
            Developed by Jake Dobler and John Gaynor
          </p>

          {/* <button className={styles.SWIGoogle} onClick={signInWithGoogle}>
            <Image
              src={Google}
              width={50}
              height={50}
              alt="Sign in with google"
            />
            Sign in Google
          </button> */}
        </div>
      </main>
    </>
  );
}

function GoogleSignUp() {
  // This is the sign in with google function
  const signInWithGoogle = async () => {
    await auth
      .signInWithPopup(googleAuthProvider)
      .then(() => {
        toast.success("Signed in");
      })
      .catch((error) => {
        console.log(error.message);
      });
  };
  return (
    <button className={styles.SWIGoogle} onClick={signInWithGoogle}>
      <Image src={Google} width={50} height={50} alt="Sign in with google" />
      Sign in Google
    </button>
  );
}

function SignOutButton() {
  return <button onClick={() => auth.signOut()}>Sign Out</button>;
}

function Hero() {
  return (
    <>
      <h1 className="text-[50px] font-lato font-black italic">
        WELCOME TO CATFISH!
      </h1>
      <p className="font-raleway tracking-wide">
        In this social media-inspired game, players work together to catch the
        elusive catfish, but be careful - not everyone is who they claim to be!
      </p>
      <p className="font-raleway tracking-wide">
        Analyze messages, photos, and participate in minigames to expose the
        fake profiles and emerge victorious.
      </p>
      <h2 className="font-lato italic">
        DO YOU HAVE WHAT IT TAKES TO CATCH THE CATFISH?
      </h2>
    </>
  );
}
